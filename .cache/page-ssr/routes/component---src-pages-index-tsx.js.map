{"version":3,"file":"component---src-pages-index-tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAO,cAAeA,kBAAiB,EAAG,CACtC,KAAMC,YAAW,CAAG,+FAA+F,CAEnH,KAAMC,aAAY,CAAG,KAAMC,CAAAA,KAAK,CAAC,mCAAmC,CAAE,CACpEC,OAAO,CAAE,CACPC,aAAa,CAAG,UAASJ,WAAY,EACvC,CACF,CAAC,CAAC,CAEF,GAAI,CAACC,YAAY,CAACI,EAAE,CAAE,CACpB,KAAM,IAAIC,MAAK,CAAC,8BAA8B,CAAC,CACjD,CAEA,KAAMC,aAAY,CAAG,KAAMN,aAAY,CAACO,IAAI,EAAE,CAC9C,MAAOD,aAAY,CACrB;;ACfF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGmD;AACU;AAkB7D,MAAMK,SAA8B,GAAG,MAAM;EAC3C,MAAM;IAAA,GAACL,YAAY;IAAA,GAAEM;EAAe,IAAIF,sBAAQ,CAAe,EAAE,CAAC;EAElED,uBAAS,CAAC,MAAM;IACd,MAAMI,eAAe,GAAG,YAAY;MAClC,IAAI;QACF,MAAMP,YAAY,GAAG,MAAMR,iBAAiB,EAAE;QAC9Cc,eAAe,CAACN,YAAY,CAAC;MAC/B,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDD,eAAe,EAAE;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,gCAAAA;IAAMQ,SAAS,EAAC;EAAoD,gBAClER,gCAAAA;IAAKQ,SAAS,EAAC;EAAsB,GAClCV,YAAY,CAACW,GAAG,CAAEC,IAAI,iBACrBV,gCAAAA;IAAKW,GAAG,EAAED,IAAI,CAACE,EAAG;IAACJ,SAAS,EAAC;EAAM,gBACjCR,gCAAAA;IAAIQ,SAAS,EAAC;EAA8B,GAAEE,IAAI,CAACG,IAAI,CAAM,eAC7Db,gCAAAA;IAAGQ,SAAS,EAAC;EAAe,GAAEE,IAAI,CAACI,WAAW,CAAK,CAGtD,CAAC,CACE,CACD;AAEX,CAAC;AAED,4CAAeX,SAAS,EAAC;AAElB,MAAMY,IAAY,GAAG,mBAAMf,gCAAAA,gBAAO,WAAS,CAAQ","sources":["webpack://jono-lane/./src/controllers/githubApi.ts","webpack://jono-lane/./src/pages/index.tsx"],"sourcesContent":["export async function fetchRepositories() {\n    const accessToken = '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'\n  \n    const repoResponse = await fetch(\"https://api.github.com/user/repos\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n  \n    if (!repoResponse.ok) {\n      throw new Error(\"Failed to fetch repositories\");\n    }\n  \n    const repositories = await repoResponse.json();\n    return repositories;\n  }","// import * as React from \"react\"\n/*\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport React, { useEffect, useState } from \"react\";\nimport { authenticateToGitHub } from \"../controllers/githubApi\";\n\ninterface Repository {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: {\n    key: string;\n    name: string;\n    url: string | null;\n    spdx_id: string | null;\n    node_id: string;\n    html_url?: string | undefined;\n  } | null;\n    description: string | null;\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [repositories, setRepositories] = useState<Repository[]>([]);\n\n  useEffect(() => {\n    authenticateToGitHub().catch(console.error);\n  }, []);\n\n  return (\n    <main className=\"flex items-center justify-center h-screen bg-black\">\n      <div className=\"max-w-md mx-auto p-4\">\n        {repositories.map((repo) => (\n          <div key={repo.id} className=\"mb-4\">\n            <h3 className=\"text-white text-xl font-bold\">{repo.name}</h3>\n            <p className=\"text-gray-300\">{repo.description}</p>\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Jono Lane</title>;\n*/\n\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport React, { useEffect, useState } from \"react\";\nimport { fetchRepositories } from \"../controllers/githubApi\";\n\ninterface Repository {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: {\n    key: string;\n    name: string;\n    url: string | null;\n    spdx_id: string | null;\n    node_id: string;\n    html_url?: string | undefined;\n  } | null;\n  description: string | null;\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [repositories, setRepositories] = useState<Repository[]>([]);\n\n  useEffect(() => {\n    const getRepositories = async () => {\n      try {\n        const repositories = await fetchRepositories();\n        setRepositories(repositories);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    getRepositories();\n  }, []);\n\n  return (\n    <main className=\"flex items-center justify-center h-screen bg-black\">\n      <div className=\"max-w-md mx-auto p-4\">\n        {repositories.map((repo) => (\n          <div key={repo.id} className=\"mb-4\">\n            <h3 className=\"text-white text-xl font-bold\">{repo.name}</h3>\n            <p className=\"text-gray-300\">{repo.description}</p>\n            {/* Add more details or styling as needed */}\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Jono Lane</title>;"],"names":["fetchRepositories","accessToken","repoResponse","fetch","headers","Authorization","ok","Error","repositories","json","React","useEffect","useState","IndexPage","setRepositories","getRepositories","error","console","className","map","repo","key","id","name","description","Head"],"sourceRoot":""}