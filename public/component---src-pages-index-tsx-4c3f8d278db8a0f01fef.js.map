{"version":3,"file":"component---src-pages-index-tsx-4c3f8d278db8a0f01fef.js","mappings":"+LAmGA,MA/BuC,KACrC,MAAM,EAACA,EAAY,EAAEC,IAAmBC,EAAAA,EAAAA,UAAuB,IAe/D,OAbAC,EAAAA,EAAAA,YAAU,KACgBC,WACtB,IACE,MAAMJ,QC1EPI,iBACH,MAEMC,QAAqBC,MAAM,oCAAqC,CACpEC,QAAS,CACPC,cAAgB,0GAIpB,IAAKH,EAAaI,GAChB,MAAM,IAAIC,MAAM,gCAIlB,aAD2BL,EAAaM,MAE1C,CD2DiCC,GAC3BX,EAAgBD,EAClB,CAAE,MAAOa,GACPC,QAAQD,MAAMA,EAChB,GAGFE,EAAiB,GAChB,IAGDC,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,sDACdD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,wBACZjB,EAAakB,KAAKC,GACjBH,EAAAA,cAAAA,MAAAA,CAAKI,IAAKD,EAAKE,GAAIJ,UAAU,QAC3BD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,gCAAgCE,EAAKG,MACnDN,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,iBAAiBE,EAAKI,iBAKpC,EAMJ,MAAMC,EAAe,IAAMR,EAAAA,cAAAA,QAAAA,KAAO,Y","sources":["webpack://jono-lane/./src/pages/index.tsx","webpack://jono-lane/./src/controllers/githubApi.ts"],"sourcesContent":["// import * as React from \"react\"\n/*\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport React, { useEffect, useState } from \"react\";\nimport { authenticateToGitHub } from \"../controllers/githubApi\";\n\ninterface Repository {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: {\n    key: string;\n    name: string;\n    url: string | null;\n    spdx_id: string | null;\n    node_id: string;\n    html_url?: string | undefined;\n  } | null;\n    description: string | null;\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [repositories, setRepositories] = useState<Repository[]>([]);\n\n  useEffect(() => {\n    authenticateToGitHub().catch(console.error);\n  }, []);\n\n  return (\n    <main className=\"flex items-center justify-center h-screen bg-black\">\n      <div className=\"max-w-md mx-auto p-4\">\n        {repositories.map((repo) => (\n          <div key={repo.id} className=\"mb-4\">\n            <h3 className=\"text-white text-xl font-bold\">{repo.name}</h3>\n            <p className=\"text-gray-300\">{repo.description}</p>\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Jono Lane</title>;\n*/\n\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport React, { useEffect, useState } from \"react\";\nimport { fetchRepositories } from \"../controllers/githubApi\";\n\ninterface Repository {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: {\n    key: string;\n    name: string;\n    url: string | null;\n    spdx_id: string | null;\n    node_id: string;\n    html_url?: string | undefined;\n  } | null;\n  description: string | null;\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [repositories, setRepositories] = useState<Repository[]>([]);\n\n  useEffect(() => {\n    const getRepositories = async () => {\n      try {\n        const repositories = await fetchRepositories();\n        setRepositories(repositories);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    getRepositories();\n  }, []);\n\n  return (\n    <main className=\"flex items-center justify-center h-screen bg-black\">\n      <div className=\"max-w-md mx-auto p-4\">\n        {repositories.map((repo) => (\n          <div key={repo.id} className=\"mb-4\">\n            <h3 className=\"text-white text-xl font-bold\">{repo.name}</h3>\n            <p className=\"text-gray-300\">{repo.description}</p>\n            {/* Add more details or styling as needed */}\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Jono Lane</title>;","export async function fetchRepositories() {\n    const accessToken = process.env.GATSBY_FINE_GRAINED_ACCESS_TOKEN;\n  \n    const repoResponse = await fetch(\"https://api.github.com/user/repos\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n  \n    if (!repoResponse.ok) {\n      throw new Error(\"Failed to fetch repositories\");\n    }\n  \n    const repositories = await repoResponse.json();\n    return repositories;\n  }"],"names":["repositories","setRepositories","useState","useEffect","async","repoResponse","fetch","headers","Authorization","ok","Error","json","fetchRepositories","error","console","getRepositories","React","className","map","repo","key","id","name","description","Head"],"sourceRoot":""}