{"version":3,"file":"component---src-pages-index-tsx-8fce35c2af3f1f0bb471.js","mappings":"+LAAAA,eAAeC,IACX,MAKMC,QAAiBC,MACpB,iHACD,CACEC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,WAAY,qBACZC,MAbS,CAAC,QAaIC,KAAK,SAKzB,IAAKV,EAASW,GACZ,MAAM,IAAIC,MAAM,sCAGlB,MACMC,SADab,EAASc,QACHC,aAGnBC,QAAqBf,MAAM,yBAA0B,CACzDE,QAAS,CACPc,cAAgB,UAASJ,OAI7B,IAAKG,EAAaL,GAChB,MAAM,IAAIC,MAAM,gCAGlB,MAAMM,QAAqBF,EAAaF,OACxCK,QAAQC,IAAIF,EACd,CAEAnB,IAAuBsB,MAAMF,QAAQG,OC0DvC,MAjCuC,KACrC,MAAM,EAACJ,EAAY,EAAEK,IAAmBC,EAAAA,EAAAA,UAAuB,IAiB/D,OAfAC,EAAAA,EAAAA,YAAU,KACU3B,WAChB,IACE,MAAM4B,QAAc3B,IAChB2B,SACFH,EAAgBG,EAEpB,CAAE,MAAOJ,GACPH,QAAQG,MAAM,+BAAgCA,EAChD,GAGFK,EAAW,GACV,IAGDC,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,sDACdD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,wBACZX,EAAaY,KAAKC,GACjBH,EAAAA,cAAAA,MAAAA,CAAKI,IAAKD,EAAKE,GAAIJ,UAAU,QAC3BD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,gCAAgCE,EAAKG,MACnDN,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,iBAAiBE,EAAKI,iBAKpC,EAMJ,MAAMC,EAAe,IAAMR,EAAAA,cAAAA,QAAAA,KAAO,Y","sources":["webpack://jono-lane/./src/controllers/githubApi.ts","webpack://jono-lane/./src/pages/index.tsx"],"sourcesContent":["async function authenticateToGitHub() {\n    const clientId = \"f4dd4b030b4403ade3cb\";\n    const clientSecret = \"39f3bf3502df43c59aa044284659bc75449411d2\";\n    const scopes = [\"repo\"];\n  \n    // Step 1: Get the access token\n    const response = await fetch(\n      `/api/github/access_token?client_id=${clientId}&client_secret=${clientSecret}`,\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          grant_type: \"client_credentials\",\n          scope: scopes.join(\" \"),\n        }),\n      }\n    );\n  \n    if (!response.ok) {\n      throw new Error(\"Failed to authenticate with GitHub\");\n    }\n  \n    const data = await response.json();\n    const accessToken = data.access_token;\n  \n    // Step 2: Use the access token to make API requests\n    const repoResponse = await fetch(\"/api/github/user/repos\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n  \n    if (!repoResponse.ok) {\n      throw new Error(\"Failed to fetch repositories\");\n    }\n  \n    const repositories = await repoResponse.json();\n    console.log(repositories);\n  }\n  \n  authenticateToGitHub().catch(console.error);\n\nexport { authenticateToGitHub };\n\n// using personal access token that has a rate limit\n/*\nimport { Octokit } from \"@octokit/rest\";\n\nconst octokit = new Octokit({\n    auth: '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',\n});\n\nasync function getRepositories() {\n    const response = await octokit.repos.listForAuthenticatedUser();\n    return response.data;\n}\n\nexport { getRepositories };\n*/","// import * as React from \"react\"\n/*\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport React, { useEffect, useState } from \"react\";\nimport { authenticateToGitHub } from \"../controllers/githubApi\";\n\ninterface Repository {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: {\n    key: string;\n    name: string;\n    url: string | null;\n    spdx_id: string | null;\n    node_id: string;\n    html_url?: string | undefined;\n  } | null;\n    description: string | null;\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [repositories, setRepositories] = useState<Repository[]>([]);\n\n  useEffect(() => {\n    authenticateToGitHub().catch(console.error);\n  }, []);\n\n  return (\n    <main className=\"flex items-center justify-center h-screen bg-black\">\n      <div className=\"max-w-md mx-auto p-4\">\n        {repositories.map((repo) => (\n          <div key={repo.id} className=\"mb-4\">\n            <h3 className=\"text-white text-xl font-bold\">{repo.name}</h3>\n            <p className=\"text-gray-300\">{repo.description}</p>\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Jono Lane</title>;\n*/\n\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport React, { useEffect, useState } from \"react\";\nimport { authenticateToGitHub } from \"../controllers/githubApi\";\n\ninterface Repository {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  license: {\n    key: string;\n    name: string;\n    url: string | null;\n    spdx_id: string | null;\n    node_id: string;\n    html_url?: string | undefined;\n  } | null;\n  description: string | null;\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [repositories, setRepositories] = useState<Repository[]>([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const repos = await authenticateToGitHub();\n        if (repos !== undefined && repos !== null) {\n          setRepositories(repos);\n        }\n      } catch (error) {\n        console.error(\"Error fetching repositories:\", error);\n      }\n    };\n  \n    fetchData();\n  }, []);\n\n  return (\n    <main className=\"flex items-center justify-center h-screen bg-black\">\n      <div className=\"max-w-md mx-auto p-4\">\n        {repositories.map((repo) => (\n          <div key={repo.id} className=\"mb-4\">\n            <h3 className=\"text-white text-xl font-bold\">{repo.name}</h3>\n            <p className=\"text-gray-300\">{repo.description}</p>\n            {/* Add more details or styling as needed */}\n          </div>\n        ))}\n      </div>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Jono Lane</title>;"],"names":["async","authenticateToGitHub","response","fetch","method","headers","Accept","body","JSON","stringify","grant_type","scope","join","ok","Error","accessToken","json","access_token","repoResponse","Authorization","repositories","console","log","catch","error","setRepositories","useState","useEffect","repos","fetchData","React","className","map","repo","key","id","name","description","Head"],"sourceRoot":""}